provider "aws" {
  region = "us-east-1"
}

data "aws_ami" "windows_2022" {
  most_recent = true

  filter {
    name   = "name"
    values = ["Windows_Server-2022-English-Full-Base-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["amazon"]  # AWS owner ID
}

resource "aws_vpc" "rplab_main" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "rplab_subnet" {
  vpc_id     = aws_vpc.rplab_main.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-1a"
}

variable "admin_username" {
  description = "The admin username for the AD server"
}

variable "admin_password" {
  description = "The admin password for the AD server"
  sensitive   = true
}

variable "my_ips" {
  description = "Array of IP addresses allowed to connect on port 3389 and 5986"
  type        = list(string)
  default     = ["1.1.1.1/32", "2.2.2.2/32"]
}

resource "aws_security_group" "rplab_sg" {
  vpc_id = aws_vpc.rplab_main.id

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "rplab_sg"
  }
}

resource "aws_security_group_rule" "rplab_sg_rule" {
  for_each = toset(var.my_ips)

  security_group_id = aws_security_group.rplab_sg.id
  type              = "ingress"
  from_port         = 3389
  to_port           = 3389
  protocol          = "tcp"
  cidr_blocks       = [each.value]
}

resource "aws_security_group_rule" "rplab_sg_winrm_rule" {
  for_each = toset(var.my_ips)

  security_group_id = aws_security_group.rplab_sg.id
  type              = "ingress"
  from_port         = 5986
  to_port           = 5986
  protocol          = "tcp"
  cidr_blocks       = [each.value]
}

resource "aws_instance" "rplab_ad_server" {
  ami           = data.aws_ami.windows_2022.id
  instance_type = "t2.medium"
  subnet_id     = aws_subnet.rplab_subnet.id
  vpc_security_group_ids = [aws_security_group.rplab_sg.id]
  associate_public_ip_address="true"

  user_data = <<-EOF
              #ps1
              Rename-Computer -NewName "dc01"
              Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools
              Install-ADDSForest -DomainName "hax.local" -SafeModeAdministratorPassword (ConvertTo-SecureString '${var.admin_password}' -AsPlainText -Force)
              Restart-Computer -Force
              EOF

  tags = {
    Name = "dc01"
  }

  provisioner "local-exec" {
    command = "sleep 90"
  }

  provisioner "local-exec" {
    command = "ansible-playbook -i '${self.private_ip},' -e 'ansible_user=${var.admin_username} ansible_password=${var.admin_password} ansible_connection=winrm ansible_winrm_server_cert_validation=ignore' set_hostname.yml"
  }
}


resource "aws_instance" "rplab_utility_server" {
  count = 2

  ami           = data.aws_ami.windows_2022.id
  instance_type = "t2.medium"
  subnet_id     = aws_subnet.rplab_subnet.id
  vpc_security_group_ids = [aws_security_group.rplab_sg.id]
  associate_public_ip_address="true"

  depends_on = [aws_instance.rplab_ad_server]

  user_data = <<-EOF
              #ps1
              $new_name = if (${count.index} -eq 0) { "www" } else { "haxor" }
              Rename-Computer -NewName $new_name
              $domain = "hax.local"
              $username = "${var.admin_username}"
              $password = "${var.admin_password}"
              $password_secure = ConvertTo-SecureString $password -AsPlainText -Force
              $credentials = New-Object System.Management.Automation.PSCredential ($username, $password_secure)
              Add-Computer -DomainName $domain -Credential $credentials
              EOF

  tags = {
    Name = count.index == 0 ? "www" : "haxor"
  }

  provisioner "local-exec" {
    command = "ansible-playbook -i '${self.private_ip},' -e 'ansible_user=${var.admin_username} ansible_password=${var.admin_password} ansible_connection=winrm ansible_winrm_server_cert_validation=ignore' set_hostname.yml"
  }
}

